package com.ninjabird.firelight.animation
{
    /**
     * Defines the set of properties common to all types of animation
     * controllers, including the controller output value.
     */
    public final class ControllerProperties
    {

        /**
         * A value defining the behavior of the controller at interval boundaries. One of BoundaryBehavior.
         */
        public var boundaryBehavior:int;

        /**
         * The lower-bound value of the animation interval.
         */
        public var lowerBound:Number;

        /**
         * The upper-bound value of the animation interval.
         */
        public var upperBound:Number;

        /**
         * The starting offset into the animation interval. The default
         * value is zero, indicating that the animation interval begins
         * at the value specified by 'lowerBound'. This value should be
         * less than 'upperBound'.
         */
        public var phase:Number;

        /**
         * A multiplier value used to speed up or slow down the animation.
         * The default value is 1.0, which indicates 100% playback speed.
         */
        public var frequency:Number;

        /**
         * The value generated by the controller by performing a transforming
         * an input value. This value is in ['lowerBound', 'upperBound'].
         * This parameter is used to drive the animation.
         */
        public var localValue:Number;

        /**
         * For controllers with boundary behavior BoundaryBehavior.CONSTANT,
         * this value can be set to the constant value. It should be in the
         * range ['lowerBound', 'upperBound'].
         */
        public var constantValue:Number;

        /**
         * Indicates whether the controller is currently active.
         */
        public var isActive:Boolean;

        /**
         * Creates a new instance initialized with the specified values.
         * @param behavior The controller boundary behavior.
         * @param lower The lower bound of the animation interval.
         * @param upper The upper bound of the animation interval.
         * @param offset The offset into the animation interval.
         * @param multiplier The animation speed multiplier.
         * @param active A value indicating whether the controller is active.
         */
        public function ControllerProperties(behavior:int, lower:Number=0.0, upper:Number=1.0, offset:Number=0.0, multiplier:Number=1.0, active:Boolean=true)
        {
            if (lower > upper)
            {
                var temp:Number = lower;
                lower = upper;
                upper = temp;
            }
            this.boundaryBehavior = behavior;
            this.lowerBound       = lower;
            this.upperBound       = upper;
            this.phase            = offset;
            this.frequency        = multiplier;
            this.localValue       = lower;
            this.constantValue    = lower;
            this.isActive         = active;
        }

    }
}
