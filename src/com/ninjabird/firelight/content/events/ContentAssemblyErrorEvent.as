package com.ninjabird.firelight.content.events
{
    import flash.events.Event;
    import com.ninjabird.firelight.content.Content;

    /**
     * The event data supplied when a content item cannot be assembled from its loaded data files.
     */
    public final class ContentAssemblyErrorEvent extends Event
    {
        /**
         * The content item being assembled.
         */
        public var content:Content;

        /**
         * A description of the error that occurred.
         */
        public var errorMessage:String;

        /**
         * Constructor function for an event type raised when a content item cannot be assembled from its data files.
         * @param contentItem The content item being assembled.
         * @param error The error message generated by the assembler.
         * @param type The name of the event.
         * @param bubbles true if the event will bubble up.
         * @param cancelable true if the event is cancelable.
         */
        public function ContentAssemblyErrorEvent(contentItem:Content, error:String, type:String=ContentEvent.ASSEMBLY_ERROR, bubbles:Boolean=false, cancelable:Boolean=false)
        {
            super(type, bubbles, cancelable);
            this.content      = contentItem;
            this.errorMessage = error;
        }

        /**
         * Creates a new event instance with the same fields as this instance.
         * @return A new ContentAssemblyErrorEvent instance.
         */
        override public function clone() : Event
        {
            return new ContentAssemblyErrorEvent(this.content, this.errorMessage, type, bubbles, cancelable);
        }
    }
}
